import datetime
import re

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db_order_complex, db_basket


async def first_choice() -> InlineKeyboardMarkup:
    individual, corporate_entity, has_key = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ñ–∏–∑.–ª–∏—Ü–æ", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", \
        "–•–æ—á—É –≤–æ–π—Ç–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"üßë {individual}", callback_data=individual)],
        [InlineKeyboardButton(f"üë™ {corporate_entity}", callback_data=corporate_entity)],
        [InlineKeyboardButton(f"üîë {has_key}", callback_data=has_key)]
    ])
    return kb


async def confirm_individual_registration():
    yes, no = "–î–∞", "–ù–µ—Ç"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"üü© {yes}", callback_data=yes),
         InlineKeyboardButton(f"üü• {no}", callback_data=no)],
    ])
    return kb


async def change_individual_data_reg() -> InlineKeyboardMarkup:
    name, address, phone, back = "–ò–º—è", "–ê–¥—Ä–µ—Å", "–ù–æ–º–µ—Ä", "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"üßë {name}", callback_data=name),
         InlineKeyboardButton(f"üè¢ {address}", callback_data=address),
         InlineKeyboardButton(f"üìû {phone}", callback_data=phone)],
        [InlineKeyboardButton(f"‚Ü©Ô∏è {back}", callback_data=back)]
    ])
    return kb


async def change_company_data_reg() -> InlineKeyboardMarkup:
    name, address, next_step = "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏", "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏", "–í—Å—ë –≤–µ—Ä–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"üßë {name}", callback_data=name)],
        [InlineKeyboardButton(f"üè¢ {address}", callback_data=address)],
        [InlineKeyboardButton(f"‚úÖ {next_step}", callback_data=next_step)]
    ])
    return kb


async def change_user_data_reg() -> InlineKeyboardMarkup:
    name, phone, back = "–ò–º—è", "–ù–æ–º–µ—Ä", "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"üßë {name}", callback_data=name),
         InlineKeyboardButton(f"üìû {phone}", callback_data=phone)],
        [InlineKeyboardButton(f"‚Ü©Ô∏è {back}", callback_data=back)]
    ])
    return kb


async def main_menu(tg_id) -> InlineKeyboardMarkup:
    basket_sum = await db_basket.get_basket_sum(tg_id)
    complex_lunch, assembly_lunch, profile = "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥", "–°–æc—Ç–∞–≤–∏—Ç—å –æ–±–µ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"üç± {complex_lunch}", callback_data=complex_lunch)],
        [InlineKeyboardButton(f"ü•ò {assembly_lunch}", callback_data=f"{assembly_lunch}/salad")],
        [InlineKeyboardButton(f"Ô∏èü™™ {profile}", callback_data=profile)]
    ])
    if basket_sum > 0:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(f"üç± {complex_lunch}", callback_data=complex_lunch)],
            [InlineKeyboardButton(f"ü•ò {assembly_lunch}", callback_data=f"{assembly_lunch}/salad")],
            [InlineKeyboardButton(f"Ô∏èü™™ {profile}", callback_data=profile)],
            [InlineKeyboardButton(f"üß∫ –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞ ({basket_sum} ‚ÇΩ)", callback_data="–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")]
        ])
    return kb


async def profile_menu(company) -> InlineKeyboardMarkup:
    if company is not None:
        order, phone, back = "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(f"üçΩ {order}", callback_data=order)],
            [InlineKeyboardButton(f"üìû {phone}", callback_data=phone)],
            [InlineKeyboardButton(f"‚Ü©Ô∏è {back}", callback_data=back)]
        ])
    else:
        order, phone, address, back = "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(f"üçΩ {order}", callback_data=order)],
            [InlineKeyboardButton(f"üìû {phone}", callback_data=phone)],
            [InlineKeyboardButton(f"üìç {address}", callback_data=address)],
            [InlineKeyboardButton(f"‚Ü©Ô∏è {back}", callback_data=back)]
        ])
    return kb


async def order_complex_choice() -> InlineKeyboardMarkup:
    today, many_days, back = "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π", "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"üçΩ {today}", callback_data=today)],
        [InlineKeyboardButton(f"üìÖ {many_days}", callback_data=many_days)],
        [InlineKeyboardButton(f"Ô∏è‚Ü©Ô∏è {back}", callback_data='back_order_complex')]
    ])
    return kb


async def one_day_complex_paginate(weekday, tg_id, results, current_index) -> InlineKeyboardMarkup:
    basket_sum = await db_basket.get_basket_sum(tg_id)
    markup = InlineKeyboardMarkup()
    if current_index == 0:
        markup.row(InlineKeyboardButton("–°–ª–µ–¥.–ª–∞–Ω—á ‚ñ∂Ô∏è", callback_data=f"next:{current_index}"))
    elif current_index == len(results) - 1:
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –ª–∞–Ω—á", callback_data=f"prev:{current_index}"))
    else:
        markup.row(
            InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥.–ª–∞–Ω—á", callback_data=f"prev:{current_index}"),
            InlineKeyboardButton("–°–ª–µ–¥.–ª–∞–Ω—á ‚ñ∂Ô∏è", callback_data=f"next:{current_index}")
        )
    markup.row(InlineKeyboardButton('üç¥ –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑', callback_data=f'order_{current_index}'))
    if basket_sum > 0:
        markup.row(InlineKeyboardButton(f"üß∫ –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞ ({basket_sum} ‚ÇΩ)", callback_data="–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞"))
    if weekday:
        markup.row(InlineKeyboardButton(f"üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"))
    markup.row(InlineKeyboardButton('üîΩ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu_complex'))
    markup.add()
    return markup


async def order_complex_choice_price(lunch_id) -> InlineKeyboardMarkup:
    full_price, price_wo_salad, price_wo_soup = await db_order_complex.get_lunch_price(lunch_id)
    full, wo_salat, wo_soup, back = f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É - {full_price} ‚ÇΩ", \
        f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ —Å–∞–ª–∞—Ç–∞ - {price_wo_salad} ‚ÇΩ", \
        f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ —Å—É–ø–∞ - {price_wo_soup} ‚ÇΩ", "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"Ô∏èüåü {full}", callback_data="full_price")],
        [InlineKeyboardButton(f"üö´ {wo_salat}", callback_data="wo_salat")],
        [InlineKeyboardButton(f"üö´ {wo_soup}", callback_data="wo_soup")],
        [InlineKeyboardButton(f"‚Ü©Ô∏è {back}", callback_data="back_price")]

    ])
    return kb


async def complex_count(count) -> InlineKeyboardMarkup:
    button1, prev_, next_, done, back = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", "‚óÄÔ∏è", "‚ñ∂Ô∏è", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"Ô∏è{button1}", callback_data="blablabla")],
        [InlineKeyboardButton(f"{prev_}", callback_data=f"prevcount:{count}"),
         InlineKeyboardButton(f"{count}", callback_data=count),
         InlineKeyboardButton(f"{next_}", callback_data=f"nextcount:{count}")],
        [InlineKeyboardButton(f"{done}", callback_data=f"donecount:{count}")],
        [InlineKeyboardButton(f"‚Ü©Ô∏è {back}", callback_data="backcount")]
    ])
    return kb


async def order_custom_paginate(tg_id, dish_type, current_index, results) -> InlineKeyboardMarkup:
    basket_sum = await db_basket.get_basket_sum(tg_id)
    transitions = {
        'salad': ('soup', 'üç≤ –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Å—É–ø–∞'),
        'soup': ('maindish', 'üç± –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞'),
        'maindish': ('garnish', 'üçö –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –≥–∞—Ä–Ω–∏—Ä–∞'),
        'garnish': ('finish', 'üèÜ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä')
    }
    prev_steps = {
        'soup': ('salad', 'ü•ó –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–∞–ª–∞—Ç–∞'),
        'maindish': ('soup', 'üç≤ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—É–ø–∞'),
        'garnish': ('maindish', 'üç± –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞'),
    }
    markup = InlineKeyboardMarkup()
    prev_button = InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥.–±–ª—é–¥–æ", callback_data=f"prev:{current_index}")
    next_button = InlineKeyboardButton("–°–ª–µ–¥.–±–ª—é–¥–æ ‚ñ∂Ô∏è", callback_data=f"next:{current_index}")
    add_to_order_button = InlineKeyboardButton('üç¥ –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑', callback_data=f'order_{current_index}')
    main_menu_button = InlineKeyboardButton(
        transitions[dish_type][1], callback_data=f"–°–æc—Ç–∞–≤–∏—Ç—å –æ–±–µ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ/{transitions[dish_type][0]}")
    if current_index == 0:
        markup.row(next_button)
        markup.row(add_to_order_button)
    elif current_index == len(results) - 1:
        markup.row(prev_button)
        markup.row(add_to_order_button)
    else:
        markup.row(prev_button, next_button)
        markup.row(add_to_order_button)
    if dish_type != 'salad':
        prev_step_button = InlineKeyboardButton(
            prev_steps[dish_type][1], callback_data=f"–°–æc—Ç–∞–≤–∏—Ç—å –æ–±–µ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ/{prev_steps[dish_type][0]}")
        markup.row(prev_step_button)
    markup.row(main_menu_button)
    markup.row(InlineKeyboardButton('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu_custom'))
    if basket_sum > 0:
        markup.row(InlineKeyboardButton(f"üß∫ –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞ ({basket_sum} ‚ÇΩ)", callback_data="–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞"))
    return markup


async def weekdays() -> InlineKeyboardMarkup:
    back = "–ù–∞–∑–∞–¥"
    current_date = datetime.datetime.now().date()
    days_of_week_ru_full = {
        'mon': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tue': '–í—Ç–æ—Ä–Ω–∏–∫',
        'wed': '–°—Ä–µ–¥–∞',
        'thu': '–ß–µ—Ç–≤–µ—Ä–≥',
        'fri': '–ü—è—Ç–Ω–∏—Ü–∞',
        'sat': '–°—É–±–±–æ—Ç–∞',
        'sun': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    days_of_week = []
    for i in range(7):
        day = current_date + datetime.timedelta(days=i)
        day_of_week = day.strftime('%a').lower()
        days_of_week.append([InlineKeyboardButton(f"üìÖ {days_of_week_ru_full[day_of_week]} "
                                                  f"({day.strftime('%d.%m')})", callback_data=day_of_week)])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        *days_of_week,
        [InlineKeyboardButton(f"Ô∏è‚Ü©Ô∏è {back}", callback_data='back_order_complex')]
    ])
    return kb


async def basket_menu() -> InlineKeyboardMarkup:
    change_data, add_drink, add_bake, send_to_delivery, back = "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", \
        "–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–µ—á–∫—É", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"Ô∏èüîÄ {change_data}", callback_data='change_basket')],
        [InlineKeyboardButton(f"Ô∏èüçπ {add_drink}", callback_data='add_drink')],
        [InlineKeyboardButton(f"Ô∏èü•ê {add_bake}", callback_data='add_bake')],
        [InlineKeyboardButton(f"Ô∏èüöö {send_to_delivery}", callback_data='send_to_delivery')],
        [InlineKeyboardButton(f"Ô∏è‚Ü©Ô∏è {back}", callback_data='back_order_complex')]
    ])
    return kb


async def drinks_menu_paginate(current_index, results, tg_id) -> InlineKeyboardMarkup:
    basket_sum = await db_basket.get_basket_sum(tg_id)
    markup = InlineKeyboardMarkup()
    prev_button = InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥.–Ω–∞–ø–∏—Ç–æ–∫", callback_data=f"prev:{current_index}")
    next_button = InlineKeyboardButton("–°–ª–µ–¥.–Ω–∞–ø–∏—Ç–æ–∫ ‚ñ∂Ô∏è", callback_data=f"next:{current_index}")
    if current_index == 0:
        markup.row(next_button)
    elif current_index == len(results) - 1:
        markup.row(prev_button)
    else:
        markup.row(prev_button, next_button)
    markup.row(InlineKeyboardButton('üìè –í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–º –Ω–∞–ø–∏—Ç–∫–∞', callback_data='drink_volume'))
    markup.row(InlineKeyboardButton(f'üß∫ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É ({basket_sum} ‚ÇΩ)', callback_data="–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞ (–Ω–∞–ø–∏—Ç–∫–∏)"))
    markup.row(InlineKeyboardButton('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu_drinks'))
    return markup


async def select_weekday(weekdays_list) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    for weekday in weekdays_list:
        markup.row(InlineKeyboardButton(f'üìÖ {weekday}', callback_data=f'day_{weekday}'))
    markup.row(InlineKeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤–æ –≤—Å–µ –¥–Ω–∏", callback_data=f'day_all_days'))
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'weekdays_back'))
    return markup


async def drink_volumes(volumes) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    buttons = []
    for volume in volumes:
        buttons.append(InlineKeyboardButton(f'{volume[0]}', callback_data=f'volume_{volume[0].replace("–ª.", "")}'))
    markup.add(*buttons)
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'volume_back'))
    return markup


async def select_weekday_bakery(weekdays_list) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    for weekday in weekdays_list:
        markup.row(InlineKeyboardButton(f'üìÖ {weekday}', callback_data=f'day_{weekday}'))
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'weekdays_back'))
    return markup


async def bakery_menu_paginate(current_index, results, tg_id) -> InlineKeyboardMarkup:
    basket_sum = await db_basket.get_basket_sum(tg_id)
    markup = InlineKeyboardMarkup()
    prev_button = InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥.–≤—ã–ø–µ—á–∫–∞", callback_data=f"prev:{current_index}")
    next_button = InlineKeyboardButton("–°–ª–µ–¥.–≤—ã–ø–µ—á–∫–∞ ‚ñ∂Ô∏è", callback_data=f"next:{current_index}")
    if current_index == 0:
        markup.row(next_button)
    elif current_index == len(results) - 1:
        markup.row(prev_button)
    else:
        markup.row(prev_button, next_button)
    markup.row(InlineKeyboardButton('üç¥ –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑', callback_data=f'order_{current_index}'))
    markup.row(InlineKeyboardButton(f'üß∫ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É ({basket_sum} ‚ÇΩ)', callback_data="–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞ (–≤—ã–ø–µ—á–∫–∞)"))
    markup.row(InlineKeyboardButton('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu_bakery'))
    return markup


async def select_weekday_basket(weekdays_list):
    markup = InlineKeyboardMarkup()
    for weekday in weekdays_list:
        markup.row(InlineKeyboardButton(f'üìÖ {weekday}', callback_data=f'day_{weekday}'))
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞'))
    return markup


async def change_basket_kb(weekday, tg_id):
    markup = InlineKeyboardMarkup()
    basket = await db_basket.get_basket_by_day(weekday, tg_id)
    dishes = basket[3].split('\n')
    x = 0
    for dish in dishes:
        dish_count = dish.split(" : ")[1]
        markup.row(InlineKeyboardButton(dish, callback_data=f"{x}_{dish_count}_change"))
        x += 1
    markup.row(InlineKeyboardButton(f'‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã', callback_data=f'del_{weekday}'))
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'change_basket'))
    return markup


async def change_dish_kb(count):
    try:
        count = count.split(" ")[0]
    except AttributeError:
        count = count
    markup = InlineKeyboardMarkup()
    small = InlineKeyboardButton(f"‚óÄÔ∏è", callback_data=f"prevcount:{count}")
    count_button = InlineKeyboardButton(f"{count}", callback_data=count)
    big = InlineKeyboardButton(f"‚ñ∂Ô∏è", callback_data=f"nextcount:{count}")
    delete = InlineKeyboardButton(f"‚ùå", callback_data=f"deletecount")
    markup.row(small, count_button, big, delete)
    markup.row(InlineKeyboardButton(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'donecount:{count}'))
    markup.row(InlineKeyboardButton(f'‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='backcount'))
    return markup


async def orders_paginate(results, current_index) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    if current_index == 0:
        markup.row(InlineKeyboardButton("–°–ª–µ–¥.–∑–∞–∫–∞–∑ ‚ñ∂Ô∏è", callback_data=f"next:{current_index}"))
    elif current_index == len(results) - 1:
        markup.row(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –∑–∞–∫–∞–∑", callback_data=f"prev:{current_index}"))
    else:
        markup.row(
            InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥.–∑–∞–∫–∞–∑", callback_data=f"prev:{current_index}"),
            InlineKeyboardButton("–°–ª–µ–¥.–∑–∞–∫–∞–∑ ‚ñ∂Ô∏è", callback_data=f"next:{current_index}")
        )
    markup.row(InlineKeyboardButton('üîΩ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'))
    markup.add()
    return markup
