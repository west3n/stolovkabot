import datetime

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageIdentifierNotSpecified

import handlers.basket
from database import db_order_complex, db_basket
from keyboards import inline
from handlers import main_menu

days = ['mon', 'tue', 'wed', 'tue', 'fri', 'sat', 'sun']
weekdays = {i: day for i, day in enumerate(days)}
lunches = {
    'diet': '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–π',
    'vegan': '–í–µ–≥–∞–Ω—Å–∫–∏–π',
    'lunch1': '–û–±–µ–¥ 1',
    'lunch2': '–û–±–µ–¥ 2',
    'lunch3': '–û–±–µ–¥ 3',
    'lunch4': '–û–±–µ–¥ 4',
    'lunch5': '–û–±–µ–¥ 5'
}


class OneDayComplex(StatesGroup):
    complex_id = State()


class ManyDayComplex(StatesGroup):
    pass


async def back_button(call: types.CallbackQuery):
    await main_menu.main_menu_call(call)


async def order_complex_handler(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=await inline.order_complex_choice())


async def handle_manydays(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await call.message.delete()
        try:
            for message in data.get('media_group'):
                await call.bot.delete_message(call.message.chat.id, int(message.message_id))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified, TypeError, AttributeError):
            pass
        try:
            await call.bot.delete_message(call.message.chat.id, data.get('cap'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified, TypeError, AttributeError):
            pass
    await state.finish()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=await inline.weekdays())


async def one_day_complex_paginate(call: types.CallbackQuery, state: FSMContext):
    await OneDayComplex.complex_id.set()
    async with state.proxy() as data:
        if call.data.startswith("donecount"):
            lunch_name = await db_order_complex.get_lunch_name(data.get('lunch_id'))
            count = int(data.get('count')) if data.get('count') else 1
            price = float(data.get('lunch_price'))
            total_price = round((count * price), 2)
            weekday = data.get('weekday') if data.get('weekday') else weekdays.get(datetime.datetime.now().weekday())
            await db_basket.insert_basket(
                    weekday, call.from_user.id, f"{lunch_name} ({data.get('lunch_type')}) : {count} —à—Ç.", total_price)
            await call.answer(text=f"üß∫ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:"
                                   f"\n\n–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥ {lunch_name} ({data.get('lunch_type')})"
                                   f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {count}"
                                   f"\n\n –û–±—â–∞—è —Ü–µ–Ω–∞: {total_price}‚ÇΩ",
                              show_alert=True)
            await call.message.edit_reply_markup(
                reply_markup=await inline.one_day_complex_paginate(
                    data.get('weekday'), call.from_user.id, data.get('results'), data.get('current_index')))
        elif call.data == '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞':
            await handlers.basket.handle_basket(call, state)
        elif call.data == 'backcount':
            await call.message.edit_reply_markup(
                reply_markup=await inline.order_complex_choice_price(data.get('lunch_id')))
        elif call.data in map(str, range(1, 31)):
            await call.answer(f"–ü–æ–∫–∞ —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ {call.data} –ø–æ—Ä—Ü–∏–π!")
        elif call.data == 'blablabla':
            await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        elif call.data.startswith('prevcount') or call.data.startswith('nextcount'):
            callback_data_count = call.data.split(":")
            count = int(callback_data_count[1])
            action_count = callback_data_count[0]
            if action_count == "nextcount":
                if count + 1 <= 30:
                    count += 1
                else:
                    count = 1
            elif action_count == "prevcount":
                if count > 1:
                    count -= 1
                else:
                    count = 30
            data['count'] = count
            await call.message.edit_reply_markup(reply_markup=await inline.complex_count(count))
        elif call.data in ['full_price', 'wo_salat', 'wo_soup']:
            full_price, price_wo_salad, price_wo_soup = await db_order_complex.get_lunch_price(data.get('lunch_id'))
            if call.data == 'full_price':
                data['lunch_type'] = "–ü–æ–ª–Ω—ã–π –æ–±–µ–¥"
                data['lunch_price'] = full_price
            elif call.data == 'wo_salat':
                data['lunch_type'] = '–û–±–µ–¥ –±–µ–∑ —Å–∞–ª–∞—Ç–∞'
                data['lunch_price'] = price_wo_salad
            elif call.data == 'wo_soup':
                data['lunch_type'] = '–û–±–µ–¥ –±–µ–∑ —Å—É–ø–∞'
                data['lunch_price'] = price_wo_soup
            count = data.get('count') if data.get('count') else 1
            await call.message.edit_reply_markup(reply_markup=await inline.complex_count(count))
        elif call.data == 'back_price':
            await call.message.edit_reply_markup(
                reply_markup=await inline.one_day_complex_paginate(
                    data.get('weekday'), call.from_user.id, data.get('results'), data.get('current_index')))
        elif call.data.startswith('order_'):
            await call.message.edit_reply_markup(
                reply_markup=await inline.order_complex_choice_price(data.get('lunch_id')))
        elif call.data == 'main_menu_complex':
            for message in data.get('media_group'):
                await call.bot.delete_message(call.message.chat.id, int(message.message_id))
            message_id = data.get('cap')
            await call.bot.delete_message(call.message.chat.id, int(message_id.message_id))
            await state.finish()
            await call.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=await inline.main_menu(call.from_user.id))
        else:
            try:
                await call.message.delete()
            except MessageToDeleteNotFound:
                pass
            try:
                for message in data.get('media_group'):
                    try:
                        await call.bot.delete_message(call.message.chat.id, int(message.message_id))
                    except MessageToDeleteNotFound:
                        pass
                try:
                    await call.bot.delete_message(call.message.chat.id, data.get('cap'))
                except MessageToDeleteNotFound:
                    pass
            except TypeError:
                pass
            if call.data in days:
                weekday = call.data
                data['weekday'] = call.data
            else:
                weekday = datetime.datetime.now().weekday()
                weekday = weekdays.get(weekday)
                if data.get('weekday'):
                    weekday = data.get('weekday')
            results = await db_order_complex.get_all_lunches_by_weekday(weekday)
            if results:
                current_index = 0
                result = results[current_index]
                # [0]: –ò–º—è —Å–∞–ª–∞—Ç–∞, [1]: FileID —Å–∞–ª–∞—Ç–∞, [2]: –°–æ—Å—Ç–∞–≤ —Å–∞–ª–∞—Ç–∞, [3]: –ò–º—è —Å—É–ø–∞, [4]: FileID —Å—É–ø–∞,
                # [5]: –°–æ—Å—Ç–∞–≤ —Å—É–ø–∞, [6]: –ò–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞, [7]: FileID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞, [8]: –°–æ—Å—Ç–∞–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞,
                # [9]: –ò–º—è –≥–∞—Ä–Ω–∏—Ä–∞, [10]: FileID –≥–∞—Ä–Ω–∏—Ä–∞, [11]: –°–æ—Å—Ç–∞–≤ –≥–∞—Ä–Ω–∏—Ä–∞, [12]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π,
                # [13]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, [14]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤, [15]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤, [16]: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–Ω—á–∞,
                # [17]: ID –ª–∞–Ω—á–∞
                if call.data.startswith('prev') or call.data.startswith('next'):
                    callback_data = call.data.split(":")
                    current_index = int(callback_data[1])
                    action = callback_data[0]
                    if action == "next":
                        if current_index + 1 < len(results):
                            current_index += 1
                    elif action == "prev":
                        if current_index > 0:
                            current_index -= 1
                    result = results[current_index]
                media_group = []
                file_ids = []
                for index in [1, 4, 7, 10]:
                    if result[index]:
                        file_ids.append(result[index])
                for file_id in file_ids:
                    media = types.InputMediaPhoto(media=file_id)
                    media_group.append(media)
                media_group = await call.message.answer_media_group(media_group)
                lunch_name = lunches.get(result[16])
                text = f"‚≠ê <b>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥: {lunch_name}</b>" \
                       f"\n\nü•ó <b>{result[0]}</b> <em>({result[2]})</em>" \
                       f"\n\nüçú <b>{result[3]}</b> <em>({result[5]})</em>" \
                       f"\n\nüçó <b>{result[6]}</b> <em>({result[8]})</em>"
                text += f'\n\nüçö <b>{result[9]}</b> <em>({result[11]})</em>' if result[9] else ''
                text += f'\n\n<b>–ö–∞–ª–æ—Ä–∏–∏:</b> <em>{result[12]} –∫–∫–∞–ª</em>' \
                        f'\n<b>–ë–µ–ª–∫–∏:</b> <em>{result[13]} –≥</em>' \
                        f'\n<b>–ñ–∏—Ä—ã:</b> <em>{result[14]} –≥</em>' \
                        f'\n<b>–£–≥–ª–µ–≤–æ–¥—ã:</b> <em>{result[15]} –≥</em>'
                cap = await call.message.answer(
                    text, reply_markup=await inline.one_day_complex_paginate(
                        data.get('weekday'), call.from_user.id, results, current_index))
                await OneDayComplex.complex_id.set()
                data['media_group'] = media_group
                data['cap'] = cap.message_id
                data['lunch_id'] = result[17]
                data['current_index'] = current_index
                data['results'] = results


def register(dp: Dispatcher):
    dp.register_callback_query_handler(handle_manydays, text='–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π', state="*")
    dp.register_callback_query_handler(back_button, text='back_order_complex')
    dp.register_callback_query_handler(order_complex_handler, text='–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥')
    dp.register_callback_query_handler(one_day_complex_paginate, lambda c: c.data in days + ['–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'])
    dp.register_callback_query_handler(one_day_complex_paginate, state=OneDayComplex.complex_id)
