import asyncio

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from keyboards import inline, reply
from aiogram.utils.exceptions import MessageToDeleteNotFound
from database import db_customer, db_company
from handlers import main_menu


class ChangePhone(StatesGroup):
    phone = State()


class ChangeAddress(StatesGroup):
    address = State()


class Orders(StatesGroup):
    order = State()


async def handle_profile(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user = await db_customer.get_customer(call.from_user.id)
    text = f"<b> ü™™ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>" \
           f"\n\n<b>–ò–º—è</b>: {user[2]}"
    try:
        company = await db_company.get_company_data(user[3])
        company = company[1]
    except TypeError:
        company = None
    text += f"\n<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}" if user[3] is not None else ""
    text += f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {user[4]}" \
            f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user[1]}" \
            f"\n\n<em>‚ùî–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ, " \
            f"–∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</em>"
    await call.message.edit_text(text, reply_markup=await inline.profile_menu(user[3]))


async def back_button(call: types.CallbackQuery):
    await main_menu.main_menu_call(call)


async def change_phone(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass
    phone_msg = await call.message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
                                          "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79XXXXXXXXX/89XXXXXXXXX "
                                          "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=await reply.contact())
    await ChangePhone.phone.set()
    await state.update_data({"phone_msg": phone_msg.message_id})


async def change_phone_finish(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            await msg.delete()
            await msg.bot.delete_message(msg.from_id, data.get('phone_msg'))
        except MessageToDeleteNotFound:
            pass
        if msg.text:
            if msg.text.startswith('+7') or msg.text.startswith('7') or msg.text.startswith('8'):
                digits = msg.text.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
                if digits.isdigit() and len(digits) == 11:
                    await state.update_data({'phone': msg.text})
                    message = await msg.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    await db_customer.update_phone(msg.from_id, int(msg.text))
                    user = await db_customer.get_customer(msg.from_user.id)
                    text = f"<b> ü™™ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>" \
                           f"\n\n<b>–ò–º—è</b>: {user[2]}"
                    try:
                        company = await db_company.get_company_data(user[4])
                        company = company[1]
                    except TypeError:
                        company = None
                    text += f"\n<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}" if user[3] is not None else ""
                    text += f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {user[4]}" \
                            f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {msg.text}" \
                            f"\n\n<em>‚ùî–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ, " \
                            f"–∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</em>"
                    await msg.answer(text, reply_markup=await inline.profile_menu(user[4]))
                    await msg.bot.delete_message(msg.from_id, message.message_id)
                    await state.finish()
                else:
                    wrong_format = await msg.answer(
                        "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 11, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                    data['wrong_format_1'] = wrong_format.message_id
            else:
                wrong_format = await msg.answer(
                    "‚ùå –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +79180000000 –∏–ª–∏ 89180000000, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                data['wrong_format_2'] = wrong_format.message_id
        elif msg.contact:
            await state.update_data({'phone': msg.contact.phone_number})
            message = await msg.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await db_customer.update_phone(msg.from_id, msg.contact.phone_number)
            user = await db_customer.get_customer(msg.from_user.id)
            text = f"<b> ü™™ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>" \
                   f"\n\n<b>–ò–º—è</b>: {user[2]}"
            try:
                company = await db_company.get_company_data(user[3])
                company = company[1]
            except TypeError:
                company = None
            text += f"\n<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}" if user[3] is not None else ""
            text += f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {user[4]}" \
                    f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {msg.contact.phone_number}" \
                    f"\n\n<em>‚ùî–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ, " \
                    f"–∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</em>"
            await msg.answer(text, reply_markup=await inline.profile_menu(user[3]))
            await msg.bot.delete_message(msg.chat.id, message.message_id)
            await state.finish()


async def change_address(call: types.CallbackQuery, state: FSMContext):
    address_msg = await call.message.edit_text("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
    await ChangeAddress.address.set()
    await state.update_data({"address_msg": address_msg.message_id})


async def change_address_finish(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            await msg.delete()
            await msg.bot.delete_message(msg.from_id, data.get('address_msg'))
        except MessageToDeleteNotFound:
            pass
    await db_customer.update_address(msg.from_id, msg.text)
    message = await msg.answer("–í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    user = await db_customer.get_customer(msg.from_user.id)
    text = f"<b> ü™™ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>" \
           f"\n\n<b>–ò–º—è</b>: {user[2]}"
    try:
        company = await db_company.get_company_data(user[3])
        company = company[1]
    except TypeError:
        company = None
    text += f"\n<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}" if user[3] is not None else ""
    text += f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {msg.text}" \
            f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user[1]}" \
            f"\n\n<em>‚ùî–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ, " \
            f"–∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã</em>"
    await msg.answer(text, reply_markup=await inline.profile_menu(user[3]))
    await msg.bot.delete_message(msg.from_id, message.message_id)
    await state.finish()


async def handle_my_orders(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Orders.order.state)
    orders = await db_customer.get_orders(call.from_user.id)
    if orders:
        current_index = 0
        result = orders[current_index]
        # [0]: ID –∑–∞–∫–∞–∑–∞, [1]: –ê–¥—Ä–µ—Å, [2]: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, [3]: –ö–æ–º–ø–∞–Ω–∏—è, [4]: Telegram ID –∑–∞–∫–∞–∑—á–∏–∫–∞,
        # [5]: –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞, [6]: –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (datetime), [7]: –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        if call.data.startswith('prev') or call.data.startswith('next'):
            callback_data = call.data.split(":")
            current_index = int(callback_data[1])
            action = callback_data[0]
            if action == "next":
                if current_index + 1 < len(orders):
                    current_index += 1
            elif action == "prev":
                if current_index > 0:
                    current_index -= 1
            result = orders[current_index]
        text = f'üöö <b>–ó–∞–∫–∞–∑ {current_index + 1} –∏–∑ {len(orders)}:</b>' \
               f"\n\n<b>üÜî ID –∑–∞–∫–∞–∑–∞:</b> {result[0]}" \
               f"\n<b>üí∏ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {int(result[5])} ‚ÇΩ" \
               f"\n<b>üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> {result[6].strftime('%d.%m.%Y')}" \
               f"\n\n<b>üç± –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{result[7]}"
        await call.message.edit_text(
            text, reply_markup=await inline.orders_paginate(orders, current_index))
    else:
        await call.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤!")


def register(dp: Dispatcher):
    dp.register_callback_query_handler(handle_profile, text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", state="*")
    dp.register_callback_query_handler(handle_my_orders, text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã', state="*")
    dp.register_callback_query_handler(back_button, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    dp.register_callback_query_handler(change_phone, text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    dp.register_message_handler(change_phone_finish, content_types=['text', 'contact'], state=ChangePhone.phone)
    dp.register_callback_query_handler(change_address, text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
    dp.register_message_handler(change_address_finish, state=ChangeAddress.address)
    dp.register_callback_query_handler(handle_my_orders, state=Orders.order)
