import re
import decouple

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageIdentifierNotSpecified

from database import db_customer
from keyboards import inline, reply


class RegistrationUser(StatesGroup):
    name = State()
    address = State()
    phone = State()
    confirm = State()
    update = State()


async def start_registration(msg: types.Message):
    await msg.answer_photo(photo=decouple.config("START_REGISTRATION"),
                           caption=f"{msg.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Classic Food!</b> üôã"
                                   f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –æ–±–µ–¥–æ–≤:",
                           reply_markup=await inline.first_choice())


async def registration_individual_start(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass
    full_name = call.from_user.full_name
    special_chars = ['_', '.', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}']
    for char in special_chars:
        full_name = call.from_user.full_name.replace(char, '\\' + char)
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$'
    if re.match(pattern, full_name):
        start_message = await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ *–ò–º—è* –∏ *–§–∞–º–∏–ª–∏—é* \n\n–ù–∞–ø—Ä–∏–º–µ—Ä, '`{full_name}`'",
                                                  parse_mode=types.ParseMode.MARKDOWN_V2)
    else:
        start_message = await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ <b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—é</b> "
                                                  f"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
    await RegistrationUser.name.set()
    async with state.proxy() as data:
        data['start_message'] = start_message.message_id


async def handle_individual_name(msg: types.Message, state: FSMContext):
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$'
    if not re.match(pattern, msg.text):
        await msg.delete()
        alarm_message = await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–º—è –§–∞–º–∏–ª–∏—è –Ω–∞ <b>—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</b>")
        async with state.proxy() as data:
            data['alarm_message'] = alarm_message.message_id
    else:
        async with state.proxy() as data:
            data['name'] = msg.text
            try:
                await msg.delete()
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('start_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('alarm_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            address_message = await msg.answer(
                f'–û–∫, {data.get("name")}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
                f'\n\nüçî –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –µ–¥—É (–∞–¥—Ä–µ—Å –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å):'
                f'\n\nüè¢ –ù–∞–ø—Ä–∏–º–µ—Ä, –õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 4, –æ—Ñ–∏—Å 228')
            data['address_message'] = address_message.message_id
            await RegistrationUser.next()


async def handle_individual_address(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = msg.text
        try:
            await msg.delete()
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('address_message'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        phone_message = await msg.answer(
            f"{data.get('name')}, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à –∞–¥—Ä–µ—Å:\n{data.get('address')}"
            f"\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79180000000 –∏–ª–∏ 89180000000) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=await reply.contact())
        data['phone_message'] = phone_message.message_id
    await RegistrationUser.next()


async def handle_individual_phone(msg: types.Message, state: FSMContext):
    if msg.text:
        if msg.text.startswith('+7') or msg.text.startswith('7') or msg.text.startswith('8'):
            digits = msg.text.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
            if digits.isdigit() and len(digits) == 11:
                async with state.proxy() as data:
                    data['phone'] = msg.text
                    try:
                        await msg.delete()
                    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                        pass
                    try:
                        await msg.bot.delete_message(msg.chat.id, data.get('phone_message'))
                    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                        pass
                    try:
                        await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_1'))
                    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                        pass
                    try:
                        await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_2'))
                    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                        pass
                    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:"
                                     f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                                     f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                                     f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                                     f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                                     reply_markup=await inline.confirm_individual_registration())
                    await RegistrationUser.next()
            else:
                await msg.delete()
                wrong_format = await msg.answer(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 11, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                async with state.proxy() as data:
                    data['wrong_format_1'] = wrong_format.message_id
        else:
            await msg.delete()
            wrong_format = await msg.answer(
                "‚ùå –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +79180000000 –∏–ª–∏ 89180000000, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            async with state.proxy() as data:
                data['wrong_format_2'] = wrong_format.message_id
    elif msg.contact:
        async with state.proxy() as data:
            data['phone'] = msg.contact.phone_number
        try:
            await msg.delete()
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('phone_message'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_1'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_2'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:"
                         f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                         f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                         f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                         f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                         reply_markup=await inline.confirm_individual_registration())
        await RegistrationUser.next()


async def handle_individual_confirm(call: types.CallbackQuery, state: FSMContext):
    if call.data == "–ù–∞–∑–∞–¥":
        async with state.proxy() as data:
            await call.message.edit_text(
                "–ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:"
                f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                reply_markup=await inline.confirm_individual_registration())
    elif call.data == '–î–∞':
        await call.message.edit_text(
            "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞."
            "\n\n<em>–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ '–ü—Ä–æ—Ñ–∏–ª–µ'</em>")
        async with state.proxy() as data:
            await db_customer.insert_individual_customer(data, call.from_user.id)
        await state.finish()
    elif call.data == "–ù–µ—Ç":
        await call.message.edit_text("–ö–∞–∫–æ–π –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                                     reply_markup=await inline.change_individual_data_reg())
    else:
        if call.data == '–ù–æ–º–µ—Ä':
            await call.message.delete()
            new_data_message = await call.message.answer(
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {call.data}. "
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=await reply.contact())
            async with state.proxy() as data:
                data['new_data_message'] = new_data_message.message_id
        else:
            new_data_message = await call.message.edit_text(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {call.data}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            async with state.proxy() as data:
                data['new_data_message'] = new_data_message.message_id
        async with state.proxy() as data:
            data['update'] = call.data
        await RegistrationUser.next()


async def handle_individual_update(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data.get('update') == "–ù–æ–º–µ—Ä":
            if msg.text:
                if msg.text.startswith('+7') or msg.text.startswith('7') or msg.text.startswith('8'):
                    digits = msg.text.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')',
                                                                                                                  '')
                    if digits.isdigit() and len(digits) == 11:
                        await state.update_data({'phone': msg.text})
                        try:
                            await msg.delete()
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        try:
                            await msg.bot.delete_message(msg.chat.id, data.get('phone_message'))
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        try:
                            await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_1'))
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        try:
                            await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_2'))
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        try:
                            await msg.bot.delete_message(msg.chat.id, data.get('new_data_message'))
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:"
                                         f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                                         f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                                         f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{msg.text}</em>"
                                         f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                                         reply_markup=await inline.confirm_individual_registration())
                        await state.set_state(RegistrationUser.confirm.state)
                    else:
                        await msg.delete()
                        wrong_format = await msg.answer(
                            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 11, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                        data['wrong_format_1'] = wrong_format.message_id
                else:
                    await msg.delete()
                    wrong_format = await msg.answer(
                        "‚ùå –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +79180000000 –∏–ª–∏ 89180000000, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                    data['wrong_format_2'] = wrong_format.message_id
            elif msg.contact:
                await state.update_data({'phone': msg.contact.phone_number})
                try:
                    await msg.delete()
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('phone_message'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_1'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_2'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('new_data_message'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:"
                                 f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                                 f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                                 f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{msg.contact.phone_number}</em>"
                                 f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                                 reply_markup=await inline.confirm_individual_registration())
                await state.set_state(RegistrationUser.confirm.state)
        if data.get('update') == "–ò–º—è":
            pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$'
            if not re.match(pattern, msg.text):
                await msg.delete()
                alarm_message = await msg.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–º—è –§–∞–º–∏–ª–∏—è –Ω–∞ <b>—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</b>")
                data['alarm_message'] = alarm_message.message_id
            else:
                await state.update_data({"name": msg.text})
                await state.set_state(RegistrationUser.confirm.state)
                await msg.delete()
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('new_data_message'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:"
                                 f"\n\n<b>–ò–º—è:</b> <em>{msg.text}</em>"
                                 f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                                 f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                                 f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                                 reply_markup=await inline.confirm_individual_registration())
        if data.get('update') == "–ê–¥—Ä–µ—Å":
            await state.update_data({"address": msg.text})
            await state.set_state(RegistrationUser.confirm.state)
            await msg.delete()
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('new_data_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:"
                             f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                             f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{msg.text}</em>"
                             f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                             f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                             reply_markup=await inline.confirm_individual_registration())


def register(dp: Dispatcher):
    dp.register_callback_query_handler(registration_individual_start, text='–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ')
    dp.register_message_handler(handle_individual_name, state=RegistrationUser.name)
    dp.register_message_handler(handle_individual_address, state=RegistrationUser.address)
    dp.register_message_handler(handle_individual_phone, content_types=['text', 'contact'],
                                state=RegistrationUser.phone)
    dp.register_callback_query_handler(handle_individual_confirm, state=RegistrationUser.confirm)
    dp.register_message_handler(handle_individual_update, content_types=['text', 'contact'],
                                state=RegistrationUser.update)
