import re
import string
import random

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageIdentifierNotSpecified

from database import db_company, db_customer
from keyboards import inline, reply


class RegistrationCompany(StatesGroup):
    args = State()
    name = State()
    address = State()
    finish_company = State()
    update = State()
    user_name = State()
    user_phone = State()
    user_confirm = State()
    user_update = State()


def generate_key():
    characters = string.ascii_letters + string.digits
    key = ''.join(random.choice(characters) for _ in range(6))
    return key


async def registration_get_company_key(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass
    reg_start = await call.message.answer('üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:')
    await RegistrationCompany.args.set()
    await state.update_data({"reg_start": reg_start.message_id})


async def handle_company_key(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            await msg.delete()
    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
        pass
    try:
        await msg.bot.delete_message(msg.from_id, data.get('reg_start'))
    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
        pass
    try:
        await msg.bot.delete_message(msg.from_id, data.get('error_message'))
    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
        pass
    if len(msg.text) == 6:
        if msg.text in await db_company.get_all_key_list():
            company_data = await db_company.get_company_data_by_key(msg.text)
            start_message = await msg.answer(f"–í—ã –∑–∞—à–ª–∏ –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–ª—é—á –∫–æ–º–ø–∞–Ω–∏–∏ <b>{company_data[1]}</b>."
                                             f"\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ <b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—é</b>"
                                             f"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
            await RegistrationCompany.user_name.set()
            async with state.proxy() as data:
                data['start_message'] = start_message.message_id
                data['company_id'] = company_data[0]
                data['address'] = company_data[2]
                data['args'] = msg.text
        else:
            error_message = await msg.answer('–î–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π!')
            await state.update_data({"error_message": error_message.message_id})
    else:
        error_message = await msg.answer('–î–ª–∏–Ω–∞ –∫–ª—é—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!')
        await state.update_data({"error_message": error_message.message_id})


async def registration_company_start(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass
    reg_start = await call.message.answer("üíº –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:"
                                          "\n\n –ù–∞–ø—Ä–∏–º–µ—Ä: –û–û–û '–†–æ–º–∞—à–∫–∞'")
    await RegistrationCompany.name.set()
    await state.update_data({"reg_start": reg_start.message_id})


async def handle_company_name(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            await msg.delete()
            await msg.bot.delete_message(msg.from_id, data.get('reg_start'))
    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
        pass
    all_companies_names = await db_company.get_all_companies_names()
    if msg.text in all_companies_names:
        await msg.answer("‚ùóÔ∏è–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!"
                         "\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, "
                         "–µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è —Ç–æ—á–Ω–æ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å!")
    else:
        async with state.proxy() as data:
            data['name'] = msg.text
            data['args'] = None
        name_msg = await msg.answer(f"ü•≥ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {msg.text}"
                                    "\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await RegistrationCompany.next()
        await state.update_data({"name_msg": name_msg.message_id})


async def handle_company_address(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            await msg.delete()
            await msg.bot.delete_message(msg.from_id, data.get('name_msg'))
    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
        pass
    async with state.proxy() as data:
        data['address'] = msg.text
    await msg.answer(f"–ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:\n\n<b>–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏:</b> "
                     f"{data.get('name')}\n<b>–ê–¥—Ä–µ—Å:</b> {data.get('address')}",
                     reply_markup=await inline.change_company_data_reg())
    await RegistrationCompany.next()


async def handle_company_update(call: types.CallbackQuery, state: FSMContext):
    if call.data == '–í—Å—ë –≤–µ—Ä–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é':
        async with state.proxy() as data:
            secret_key = generate_key()
            full_name = call.from_user.full_name
            special_chars = ['_', '.', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}']
            for char in special_chars:
                full_name = call.from_user.full_name.replace(char, '\\' + char)
            pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$'
            if re.match(pattern, full_name):
                start_message = await call.message.edit_text(
                    f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ *–ò–º—è* –∏ *–§–∞–º–∏–ª–∏—é* \n\n–ù–∞–ø—Ä–∏–º–µ—Ä, '`{full_name}`'",
                    parse_mode=types.ParseMode.MARKDOWN_V2)
            else:
                start_message = await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ <b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—é</b> "
                                                             f"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
            company_id = await db_company.add_new_company(data, secret_key)
            data['start_message'] = start_message.message_id
            data['company_id'] = company_id
            await state.set_state(RegistrationCompany.user_name.state)
    else:
        update_message = await call.message.edit_text(f'–•–æ—Ä–æ—à–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ {call.data.lower()}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:')
        await state.set_state(RegistrationCompany.update.state)
        async with state.proxy() as data:
            data['update'] = call.data
            data['update_message'] = update_message.message_id


async def handle_new_update_company(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data.get('update') == '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏':
            await state.update_data({"address": msg.text})
            try:
                await msg.delete()
                await msg.bot.delete_message(msg.chat.id, data.get('update_message'))
            except MessageToDeleteNotFound:
                pass
            await msg.answer(f"–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:\n\n<b>–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏:</b> "
                             f"{data.get('name')}\n<b>–ê–¥—Ä–µ—Å: {msg.text}</b>",
                             reply_markup=await inline.change_company_data_reg())
        else:
            await state.update_data({'name': msg.text})
            try:
                await msg.delete()
                await msg.bot.delete_message(msg.chat.id, data.get('update_message'))
            except MessageToDeleteNotFound:
                pass
            await msg.answer(f"–ù–æ–≤–æ–µ –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∞–Ω–æ!! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:\n\n<b>–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏:</b> "
                             f"{msg.text}\n<b>–ê–¥—Ä–µ—Å:</b> {data.get('address')}",
                             reply_markup=await inline.change_company_data_reg())
        await state.set_state(RegistrationCompany.finish_company.state)


async def handle_user_name(msg: types.Message, state: FSMContext):
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$'
    if not re.match(pattern, msg.text):
        await msg.delete()
        alarm_message = await msg.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–º—è –§–∞–º–∏–ª–∏—è –Ω–∞ <b>—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</b>")
        async with state.proxy() as data:
            data['alarm_message'] = alarm_message.message_id
    else:
        async with state.proxy() as data:
            data['name'] = msg.text
            try:
                await msg.delete()
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('start_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('alarm_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            phone_message = await msg.answer(
                f"{data.get('name')}, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à–µ –∏–º—è!"
                f"\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79180000000 –∏–ª–∏ 89180000000) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=await reply.contact())
            data['phone_message'] = phone_message.message_id
            await RegistrationCompany.next()


async def handle_user_phone(msg: types.Message, state: FSMContext):
    if msg.text:
        if msg.text.startswith('+7') or msg.text.startswith('7') or msg.text.startswith('8'):
            digits = msg.text.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
            if digits.isdigit() and len(digits) == 11:
                async with state.proxy() as data:
                    data['phone'] = msg.text
                    try:
                        await msg.delete()
                    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                        pass
                    try:
                        await msg.bot.delete_message(msg.chat.id, data.get('phone_message'))
                    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                        pass
                    try:
                        await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_1'))
                    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                        pass
                    try:
                        await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_2'))
                    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                        pass
                    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:"
                                     f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                                     f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                                     f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                                     reply_markup=await inline.confirm_individual_registration())
                    await RegistrationCompany.next()
            else:
                await msg.delete()
                wrong_format = await msg.answer(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 11, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                async with state.proxy() as data:
                    data['wrong_format_1'] = wrong_format.message_id
        else:
            await msg.delete()
            wrong_format = await msg.answer(
                "‚ùå –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +79180000000 –∏–ª–∏ 89180000000, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            async with state.proxy() as data:
                data['wrong_format_2'] = wrong_format.message_id
    elif msg.contact:
        async with state.proxy() as data:
            data['phone'] = msg.contact.phone_number
        try:
            await msg.delete()
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('phone_message'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_1'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_2'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:"
                         f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                         f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                         f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                         reply_markup=await inline.confirm_individual_registration())
        await RegistrationCompany.next()


async def handle_user_confirm(call: types.CallbackQuery, state: FSMContext):
    if call.data == "–ù–∞–∑–∞–¥":
        async with state.proxy() as data:
            await call.message.edit_text(
                "–ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:"
                f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                reply_markup=await inline.confirm_individual_registration())
    elif call.data == '–î–∞':
        async with state.proxy() as data:
            args = data.get('args')
            secret_key = await db_company.get_company_data(data.get('company_id'))
            if args:
                text = f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!' \
                       f"\n\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞." \
                       f"\n\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ '–ü—Ä–æ—Ñ–∏–ª–µ'"
            else:
                text = f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è " \
                       f"—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏: `{secret_key[3]}` (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∫–∞—Å–∞–Ω–∏–µ–º)" \
                       f"\n\n–¢–∞–∫–∂–µ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –º–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: " \
                       f"\n\n`https://t.me/stolovka_devbot?start={secret_key[3]}` (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∫–∞—Å–∞–Ω–∏–µ–º)" \
                       f"\n\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞." \
                       "\n\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ '–ü—Ä–æ—Ñ–∏–ª–µ'"
            special_chars = ['_', '.', '*', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '!']
            for char in special_chars:
                escaped_char = '\\' + char
                text = text.replace(char, escaped_char)
            await call.message.edit_text(text, parse_mode=types.ParseMode.MARKDOWN_V2)
            await db_customer.insert_individual_customer(data, call.from_user.id)
        await state.finish()
    elif call.data == "–ù–µ—Ç":
        await call.message.edit_text("–ö–∞–∫–æ–π –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                                     reply_markup=await inline.change_user_data_reg())
    else:
        if call.data == '–ù–æ–º–µ—Ä':
            await call.message.delete()
            new_data_message = await call.message.answer(
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {call.data}. "
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=await reply.contact())
            async with state.proxy() as data:
                data['new_data_message'] = new_data_message.message_id
        else:
            new_data_message = await call.message.edit_text(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å {call.data}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            async with state.proxy() as data:
                data['new_data_message'] = new_data_message.message_id
        async with state.proxy() as data:
            data['update'] = call.data
        await RegistrationCompany.next()


async def handle_user_update(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data.get('update') == "–ù–æ–º–µ—Ä":
            if msg.text:
                if msg.text.startswith('+7') or msg.text.startswith('7') or msg.text.startswith('8'):
                    digits = msg.text.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')',
                                                                                                                  '')
                    if digits.isdigit() and len(digits) == 11:
                        await state.update_data({'phone': msg.text})
                        try:
                            await msg.delete()
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        try:
                            await msg.bot.delete_message(msg.chat.id, data.get('phone_message'))
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        try:
                            await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_1'))
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        try:
                            await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_2'))
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        try:
                            await msg.bot.delete_message(msg.chat.id, data.get('new_data_message'))
                        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                            pass
                        await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:"
                                         f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                                         f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                                         f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{msg.text}</em>"
                                         f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                                         reply_markup=await inline.confirm_individual_registration())
                        await state.set_state(RegistrationCompany.user_confirm.state)
                    else:
                        await msg.delete()
                        wrong_format = await msg.answer(
                            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 11, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                        data['wrong_format_1'] = wrong_format.message_id
                else:
                    await msg.delete()
                    wrong_format = await msg.answer(
                        "‚ùå –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +79180000000 –∏–ª–∏ 89180000000, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                    data['wrong_format_2'] = wrong_format.message_id
            elif msg.contact:
                await state.update_data({'phone': msg.contact.phone_number})
                try:
                    await msg.delete()
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('phone_message'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_1'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('wrong_format_2'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('new_data_message'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:"
                                 f"\n\n<b>–ò–º—è:</b> <em>{data.get('name')}</em>"
                                 f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                                 f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{msg.contact.phone_number}</em>"
                                 f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                                 reply_markup=await inline.confirm_individual_registration())
                await state.set_state(RegistrationCompany.user_confirm.state)
        if data.get('update') == "–ò–º—è":
            pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$'
            if not re.match(pattern, msg.text):
                await msg.delete()
                alarm_message = await msg.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–º—è –§–∞–º–∏–ª–∏—è –Ω–∞ <b>—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</b>")
                data['alarm_message'] = alarm_message.message_id
            else:
                await state.update_data({"name": msg.text})
                await state.set_state(RegistrationCompany.user_confirm.state)
                await msg.delete()
                try:
                    await msg.bot.delete_message(msg.chat.id, data.get('new_data_message'))
                except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                    pass
                await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑:"
                                 f"\n\n<b>–ò–º—è:</b> <em>{msg.text}</em>"
                                 f"\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <em>{data.get('address')}</em>"
                                 f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <em>{data.get('phone')}</em>"
                                 f"\n\n–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?",
                                 reply_markup=await inline.confirm_individual_registration())


def register(dp: Dispatcher):
    dp.register_callback_query_handler(registration_get_company_key, text='–•–æ—á—É –≤–æ–π—Ç–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É')
    dp.register_message_handler(handle_company_key, state=RegistrationCompany.args)
    dp.register_callback_query_handler(registration_company_start, text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é')
    dp.register_message_handler(handle_company_name, state=RegistrationCompany.name)
    dp.register_message_handler(handle_company_address, state=RegistrationCompany.address)
    dp.register_callback_query_handler(handle_company_update, state=RegistrationCompany.finish_company)
    dp.register_message_handler(handle_new_update_company, state=RegistrationCompany.update)
    dp.register_message_handler(handle_user_name, state=RegistrationCompany.user_name)
    dp.register_message_handler(handle_user_phone, content_types=['text', 'contact'],
                                state=RegistrationCompany.user_phone)
    dp.register_callback_query_handler(handle_user_confirm, state=RegistrationCompany.user_confirm)
    dp.register_message_handler(handle_user_update, content_types=['text', 'contact'],
                                state=RegistrationCompany.user_update)
